name: Release
on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  test:
    name: Test
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
     
      - name: Unit Tests
        run: go test ./src/...
      - name: Integration Tests
        run: go test ./tests/...
  release:
    needs: test
    name: Release
    permissions: 
      contents: write
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: go.mod

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest
    - name: Generate License File
      run: | 
        go-licenses check .
        rm src/license/license.txt
        go-licenses report . --template src/license/license.txt.tpl > src/license/license.txt
        go test -tags release ./src/license/...    
    
    - name: Set Build Variables
      run: |
        version=${{ github.ref_name }}
        version=${version:1}
        echo asset=robobackup-${{ github.ref_name }} >> $GITHUB_ENV
        echo ldflags="-s -w -X 'github.com/aicirt2012/robobackup/src/sys/build.version=$version'" >> $GITHUB_ENV

    - name: Build
      run: |
        mkdir ./$asset
        env GOOS=windows GOARCH=amd64 go build -ldflags "$ldflags" -o ./$asset/windows/robobackup.exe
        cp src/license/license.txt $asset/license.txt
        zip -r ${asset}.zip $asset
        go test -tags release -ldflags "$ldflags" ./src/sys/build/...

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        asset: ${{ env.asset }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_name: ${{ env.asset }}.zip
        asset_path: ./${{ env.asset }}.zip
        asset_content_type: application/zip